/*
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.google.measurement.aggregation;

import com.google.measurement.FilterMap;
import com.google.measurement.Source;
import com.google.measurement.Trigger;
import com.google.measurement.XNetworkData;
import com.google.measurement.util.Filter;
import com.google.measurement.util.UnsignedLong;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;
import java.util.Optional;
import java.util.TreeMap;
import org.json.simple.parser.ParseException;

/**
 * Class used to generate AggregatePayload using AggregatableAttributionSource and
 * AggregatableAttributionTrigger.
 */
public class AggregatePayloadGenerator {
  private AggregatePayloadGenerator() {}

  /**
   * Generates the list of histogram contributions from given AggregatableAttributionSource and
   * AggregatableAttributionTrigger.
   *
   * @param source The Source used for aggregation.
   * @param trigger The Trigger used for aggregation.
   * @return the list of aggregate histogram contributions generated by the given source and
   *     trigger.
   */
  public static Optional<List<AggregateHistogramContribution>> generateAttributionReport(
      Source source, Trigger trigger) throws ParseException {
    Optional<AggregatableAttributionSource> aggregateAttributionSource =
        source.getAggregatableAttributionSource();
    Optional<AggregatableAttributionTrigger> aggregateAttributionTrigger =
        trigger.getAggregatableAttributionTrigger();
    if (!aggregateAttributionSource.isPresent() || !aggregateAttributionTrigger.isPresent()) {
      return Optional.empty();
    }
    AggregatableAttributionSource attributionSource = aggregateAttributionSource.get();
    AggregatableAttributionTrigger attributionTrigger = aggregateAttributionTrigger.get();
    FilterMap sourceFilterMap = attributionSource.getFilterMap();
    TreeMap<String, BigInteger> aggregateSourceMap =
        new TreeMap<>(attributionSource.getAggregatableSource());
    for (AggregateTriggerData triggerData : attributionTrigger.getTriggerData()) {
      Optional<List<FilterMap>> filterSet = triggerData.getFilterSet();
      Optional<List<FilterMap>> notFilterSet = triggerData.getNotFilterSet();
      // Skip this trigger data when filter doesn't match.
      if (filterSet.isPresent() && !Filter.isFilterMatch(sourceFilterMap, filterSet.get(), true)) {
        continue;
      }
      // Skip this trigger data when not_filter doesn't match.
      if (notFilterSet.isPresent()
          && !Filter.isFilterMatch(sourceFilterMap, notFilterSet.get(), false)) {
        continue;
      }
      final BigInteger triggerDataKey;
      Optional<BigInteger> keyMappingForAdtech =
          Optional.ofNullable(trigger.parseAdtechKeyMapping())
              .map(map -> map.get(source.getEnrollmentId()));
      if (source.getParentId() != null && keyMappingForAdtech.isPresent()) {
        int keyOffset =
            triggerData
                .getXNetworkData()
                .flatMap(XNetworkData::getKeyOffset)
                .map(UnsignedLong::getValue)
                .map(Long::intValue)
                .orElse(0);
        BigInteger orValue = keyMappingForAdtech.get().shiftLeft(keyOffset);
        triggerDataKey = triggerData.getKey().or(orValue);
      } else {
        triggerDataKey = triggerData.getKey();
      }
      for (String sourceKey : triggerData.getSourceKeys()) {
        aggregateSourceMap.computeIfPresent(sourceKey, (k, v) -> v.or(triggerDataKey));
      }
    }
    List<AggregateHistogramContribution> contributions = new ArrayList<>();
    for (String id : aggregateSourceMap.navigableKeySet()) {
      if (!attributionTrigger.getValues().containsKey(id)) {
        continue;
      }
      AggregateHistogramContribution contribution =
          new AggregateHistogramContribution.Builder()
              .setKey(aggregateSourceMap.get(id))
              .setValue(attributionTrigger.getValues().get(id))
              .build();
      contributions.add(contribution);
    }
    if (contributions.size() > 0) {
      return Optional.of(contributions);
    }
    return Optional.empty();
  }
}
